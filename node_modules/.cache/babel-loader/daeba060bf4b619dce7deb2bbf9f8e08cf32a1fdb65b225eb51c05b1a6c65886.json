{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchContacts, saveContacts } from '@/utils/storage'; // Adjust the path as necessary\n\nexport default {\n  name: 'ContactDetails',\n  data() {\n    return {\n      contact: null // Initialize contact as null\n    };\n  },\n  mounted() {\n    this.loadContact();\n  },\n  methods: {\n    loadContact() {\n      // Fetch the contact ID from the route parameters\n      const contactId = this.$route.params.id;\n      // Fetch all contacts from local storage\n      const contacts = fetchContacts();\n      // Find the specific contact by ID\n      this.contact = contacts.find(contact => contact.id.toString() === contactId);\n      // Handle case where contact is not found\n      if (!this.contact) {\n        alert('Contact not found!');\n        // Optionally, redirect back to the contact list\n        this.$router.push('/');\n      }\n    },\n    deleteContact() {\n      if (confirm(\"Are you sure you want to delete this contact?\")) {\n        let contacts = fetchContacts();\n        contacts = contacts.filter(contact => contact.id !== this.contact.id);\n        saveContacts(contacts);\n        this.$router.push('/'); // Navigate back to the list or a confirmation page\n      }\n    },\n    goToUpdateForm() {\n      this.$router.push({\n        name: 'ContactUpdate',\n        params: {\n          id: this.contact.id\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["fetchContacts","saveContacts","name","data","contact","mounted","loadContact","methods","contactId","$route","params","id","contacts","find","toString","alert","$router","push","deleteContact","confirm","filter","goToUpdateForm"],"sources":["C:\\Users\\regev\\contact-manager\\src\\components\\ContactDetails.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Contact Details</h1>\r\n    <!-- Only display contact details if contact is not null -->\r\n    <div v-if=\"contact\">\r\n      <p>Name: {{ contact.name }}</p>\r\n      <p>Email: {{ contact.email }}</p>\r\n      <p>Address: {{ contact.address }}</p>\r\n      <p>Phone: {{ contact.phone }}</p>\r\n      <p>Category: {{ contact.category }}</p>\r\n      <!-- Display other details like address, phone, category -->\r\n      <h1>Options</h1>\r\n      <button @click=\"goToUpdateForm\">Update Contact</button>\r\n      <br><br>\r\n      <button @click=\"deleteContact\">Delete Contact</button>\r\n    </div>\r\n    <div v-else>\r\n      <p>Contact not found or loading...</p>\r\n    </div>\r\n  </div>\r\n  </template>\r\n\r\n  \r\n  <script>\r\n  import { fetchContacts, saveContacts } from '@/utils/storage'; // Adjust the path as necessary\r\n  \r\n  export default {\r\n    name: 'ContactDetails',\r\n    data() {\r\n      return {\r\n        contact: null // Initialize contact as null\r\n      };\r\n    },\r\n    mounted() {\r\n      this.loadContact();\r\n    },\r\n    methods: {\r\n      loadContact() {\r\n        // Fetch the contact ID from the route parameters\r\n        const contactId = this.$route.params.id;\r\n        // Fetch all contacts from local storage\r\n        const contacts = fetchContacts();\r\n        // Find the specific contact by ID\r\n        this.contact = contacts.find(contact => contact.id.toString() === contactId);\r\n        // Handle case where contact is not found\r\n        if (!this.contact) {\r\n          alert('Contact not found!');\r\n          // Optionally, redirect back to the contact list\r\n          this.$router.push('/');\r\n        }\r\n      },\r\n      deleteContact() {\r\n      if (confirm(\"Are you sure you want to delete this contact?\")) {\r\n        let contacts = fetchContacts();\r\n        contacts = contacts.filter(contact => contact.id !== this.contact.id);\r\n        saveContacts(contacts);\r\n        this.$router.push('/'); // Navigate back to the list or a confirmation page\r\n      }\r\n      },\r\n      goToUpdateForm() {\r\n      this.$router.push({ name: 'ContactUpdate', params: { id: this.contact.id } });\r\n    }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  "],"mappings":";AAwBE,SAASA,aAAa,EAAEC,YAAW,QAAS,iBAAiB,EAAE;;AAE/D,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAG,CAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACPD,WAAWA,CAAA,EAAG;MACZ;MACA,MAAME,SAAQ,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MACvC;MACA,MAAMC,QAAO,GAAIZ,aAAa,CAAC,CAAC;MAChC;MACA,IAAI,CAACI,OAAM,GAAIQ,QAAQ,CAACC,IAAI,CAACT,OAAM,IAAKA,OAAO,CAACO,EAAE,CAACG,QAAQ,CAAC,MAAMN,SAAS,CAAC;MAC5E;MACA,IAAI,CAAC,IAAI,CAACJ,OAAO,EAAE;QACjBW,KAAK,CAAC,oBAAoB,CAAC;QAC3B;QACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACxB;IACF,CAAC;IACDC,aAAaA,CAAA,EAAG;MAChB,IAAIC,OAAO,CAAC,+CAA+C,CAAC,EAAE;QAC5D,IAAIP,QAAO,GAAIZ,aAAa,CAAC,CAAC;QAC9BY,QAAO,GAAIA,QAAQ,CAACQ,MAAM,CAAChB,OAAM,IAAKA,OAAO,CAACO,EAAC,KAAM,IAAI,CAACP,OAAO,CAACO,EAAE,CAAC;QACrEV,YAAY,CAACW,QAAQ,CAAC;QACtB,IAAI,CAACI,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;MAC1B;IACA,CAAC;IACDI,cAAcA,CAAA,EAAG;MACjB,IAAI,CAACL,OAAO,CAACC,IAAI,CAAC;QAAEf,IAAI,EAAE,eAAe;QAAEQ,MAAM,EAAE;UAAEC,EAAE,EAAE,IAAI,CAACP,OAAO,CAACO;QAAG;MAAE,CAAC,CAAC;IAC/E;EACA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}