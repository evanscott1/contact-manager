{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"name\"\n}, \"Name:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"email\"\n}, \"Email:\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"address\"\n}, \"Address:\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"phone\"\n}, \"Phone:\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"category\"\n}, \"Category:\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _cache[6] || (_cache[6] = _withModifiers((...args) => $options.submitUpdate && $options.submitUpdate(...args), [\"prevent\"]))\n  }, [_createCommentVNode(\" Form fields populated with the contact's current details \"), _createElementVNode(\"div\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    id: \"name\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.contact.name = $event),\n    type: \"text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.contact.name]])]), _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    id: \"email\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.contact.email = $event),\n    type: \"email\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.contact.email]])]), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    id: \"address\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.contact.address = $event),\n    type: \"text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.contact.address]])]), _createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    id: \"phone\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.contact.phone = $event),\n    type: \"text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.contact.phone]])]), _createElementVNode(\"div\", null, [_hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n    id: \"category\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.contact.category = $event),\n    type: \"text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.contact.category]])]), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.submitUpdate && $options.submitUpdate(...args))\n  }, \"Save Changes\")], 32 /* NEED_HYDRATION */);\n}","map":{"version":3,"names":["_createElementVNode","for","_createElementBlock","onSubmit","_cache","_withModifiers","args","$options","submitUpdate","_createCommentVNode","_hoisted_1","id","$event","$data","contact","name","type","_hoisted_2","email","_hoisted_3","address","_hoisted_4","phone","_hoisted_5","category","onClick"],"sources":["C:\\Users\\regev\\contact-manager\\src\\components\\ContactUpdateForm.vue"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"submitUpdate\">\r\n      <!-- Form fields populated with the contact's current details -->\r\n      <div>\r\n      <label for=\"name\">Name:</label>\r\n      <input id=\"name\" v-model=\"contact.name\" type=\"text\">\r\n    </div>\r\n    <div>\r\n      <label for=\"email\">Email:</label>\r\n      <input id=\"email\" v-model=\"contact.email\" type=\"email\">\r\n    </div>\r\n    <div>\r\n      <label for=\"address\">Address:</label>\r\n      <input id=\"address\" v-model=\"contact.address\" type=\"text\">\r\n    </div>\r\n    <div>\r\n      <label for=\"phone\">Phone:</label>\r\n      <input id=\"phone\" v-model=\"contact.phone\" type=\"text\">\r\n    </div>\r\n    <div>\r\n      <label for=\"category\">Category:</label>\r\n      <input id=\"category\" v-model=\"contact.category\" type=\"text\">\r\n\r\n    </div>\r\n      <button @click=\"submitUpdate\">Save Changes</button>\r\n    </form>\r\n  </template>\r\n  \r\n  <script>\r\n  import { fetchContacts, saveContacts } from '@/utils/storage';\r\n  \r\n  export default {\r\n    props: ['id'],\r\n    data() {\r\n      return {\r\n    // Ensure contact is initialized to prevent access to undefined properties\r\n    contact: {\r\n      id: '',\r\n      name: '',\r\n      email: '',\r\n      address: '',\r\n      phone: '',\r\n      category: ''\r\n    }\r\n  };\r\n    },\r\n    mounted() {\r\n      this.loadContact();\r\n    },\r\n    methods: {\r\n      loadContact() {\r\n  const contacts = fetchContacts();\r\n  const foundContact = contacts.find(contact => contact.id.toString() === this.id);\r\n  console.log(foundContact); // Debug: Log found contact\r\n  if (foundContact) {\r\n    this.contact = { ...foundContact };\r\n  } else {\r\n    console.error('Contact not found');\r\n    this.$router.push('/');\r\n  }\r\n},\r\n\r\n      submitUpdate() {\r\n    // Assuming `contacts` is an array of all contacts and `this.contact` is the updated contact\r\n    const contacts = fetchContacts();\r\n    const index = contacts.findIndex(c => c.id === this.contact.id);\r\n    if (index !== -1) {\r\n      contacts[index] = this.contact; // Update the contact in the array\r\n      saveContacts(contacts); // Persist the updated array to storage\r\n      this.$router.push({ name: 'ContactDetails', params: { id: this.contact.id }}); // Navigate to the updated contact's details view\r\n    } else {\r\n      console.error('Contact not found');\r\n      // Handle the error case\r\n    }\r\n  },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";gCAIMA,mBAAA,CAA+B;EAAxBC,GAAG,EAAC;AAAM,GAAC,OAAK;gCAIvBD,mBAAA,CAAiC;EAA1BC,GAAG,EAAC;AAAO,GAAC,QAAM;gCAIzBD,mBAAA,CAAqC;EAA9BC,GAAG,EAAC;AAAS,GAAC,UAAQ;gCAI7BD,mBAAA,CAAiC;EAA1BC,GAAG,EAAC;AAAO,GAAC,QAAM;gCAIzBD,mBAAA,CAAuC;EAAhCC,GAAG,EAAC;AAAU,GAAC,WAAS;;uBAnBjCC,mBAAA,CAwBO;IAxBAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MADjBC,cAAA,KAAAC,IAAA,KAC2BC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;MACjCG,mBAAA,8DAAiE,EACjET,mBAAA,CAGI,cAFJU,UAA+B,E,gBAC/BV,mBAAA,CAAoD;IAA7CW,EAAE,EAAC,MAAM;IALtB,uBAAAP,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IAKgCC,KAAA,CAAAC,OAAO,CAACC,IAAI,GAAAH,MAAA;IAAEI,IAAI,EAAC;iDAAnBH,KAAA,CAAAC,OAAO,CAACC,IAAI,E,KAExCf,mBAAA,CAGM,cAFJiB,UAAiC,E,gBACjCjB,mBAAA,CAAuD;IAAhDW,EAAE,EAAC,OAAO;IATvB,uBAAAP,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IASiCC,KAAA,CAAAC,OAAO,CAACI,KAAK,GAAAN,MAAA;IAAEI,IAAI,EAAC;iDAApBH,KAAA,CAAAC,OAAO,CAACI,KAAK,E,KAE1ClB,mBAAA,CAGM,cAFJmB,UAAqC,E,gBACrCnB,mBAAA,CAA0D;IAAnDW,EAAE,EAAC,SAAS;IAbzB,uBAAAP,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IAamCC,KAAA,CAAAC,OAAO,CAACM,OAAO,GAAAR,MAAA;IAAEI,IAAI,EAAC;iDAAtBH,KAAA,CAAAC,OAAO,CAACM,OAAO,E,KAE9CpB,mBAAA,CAGM,cAFJqB,UAAiC,E,gBACjCrB,mBAAA,CAAsD;IAA/CW,EAAE,EAAC,OAAO;IAjBvB,uBAAAP,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IAiBiCC,KAAA,CAAAC,OAAO,CAACQ,KAAK,GAAAV,MAAA;IAAEI,IAAI,EAAC;iDAApBH,KAAA,CAAAC,OAAO,CAACQ,KAAK,E,KAE1CtB,mBAAA,CAIM,cAHJuB,UAAuC,E,gBACvCvB,mBAAA,CAA4D;IAArDW,EAAE,EAAC,UAAU;IArB1B,uBAAAP,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IAqBoCC,KAAA,CAAAC,OAAO,CAACU,QAAQ,GAAAZ,MAAA;IAAEI,IAAI,EAAC;iDAAvBH,KAAA,CAAAC,OAAO,CAACU,QAAQ,E,KAG9CxB,mBAAA,CAAmD;IAA1CyB,OAAK,EAAArB,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAC,YAAA,IAAAD,QAAA,CAAAC,YAAA,IAAAF,IAAA,CAAY;KAAE,cAAY,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}