{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Import the local storage utility functions\nimport { fetchContacts, saveContacts } from '@/utils/storage';\nexport default {\n  name: 'ContactForm',\n  // If you're using Vue Router's props feature for passing the ID, declare the prop\n  props: ['id'],\n  data() {\n    return {\n      // Initialize your contact object with all necessary fields\n      contact: {\n        id: null,\n        name: '',\n        email: '',\n        phone: '',\n        address: '',\n        category: ''\n      }\n    };\n  },\n  mounted() {\n    // If an ID is passed, this is an edit operation. Fetch the contact to edit.\n    if (this.id) {\n      const contacts = fetchContacts();\n      // Find the contact by ID and load its data into the form\n      this.contact = contacts.find(c => c.id === this.id) || this.contact;\n    }\n  },\n  methods: {\n    submitForm() {\n      let contacts = fetchContacts();\n      if (this.contact.id) {\n        // Update operation: find the existing contact by ID and update its details\n        contacts = contacts.map(c => c.id === this.contact.id ? this.contact : c);\n      } else {\n        // Add operation: generate a new ID for the contact and add it to the contacts array\n        this.contact.id = Date.now().toString(); // Simple way to generate a unique ID\n        contacts.push(this.contact);\n      }\n      // Persist the updated contacts list to local storage\n      saveContacts(contacts);\n      // Redirect the user to the contacts list view after saving the contact\n      this.$router.push('/');\n    }\n  }\n};","map":{"version":3,"names":["fetchContacts","saveContacts","name","props","data","contact","id","email","phone","address","category","mounted","contacts","find","c","methods","submitForm","map","Date","now","toString","push","$router"],"sources":["C:\\Users\\regev\\contact-manager\\src\\components\\ContactForm.vue"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"submitForm\">\r\n      <div>\r\n        <label for=\"name\">Name:</label>\r\n        <input id=\"name\" v-model=\"contact.name\" type=\"text\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"email\">Email:</label>\r\n        <input id=\"email\" v-model=\"contact.email\" type=\"email\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"address\">Email:</label>\r\n        <input id=\"address\" v-model=\"contact.address\" type=\"address\" required>\r\n      </div>\r\n      <!-- Add more fields for address, phone number, and category -->\r\n      <button type=\"submit\">Save Contact</button>\r\n    </form>\r\n  </template>\r\n  \r\n  <script>\r\n  // Import the local storage utility functions\r\n  import { fetchContacts, saveContacts } from '@/utils/storage';\r\n  \r\n  export default {\r\n    name: 'ContactForm',\r\n    // If you're using Vue Router's props feature for passing the ID, declare the prop\r\n    props: ['id'],\r\n    data() {\r\n      return {\r\n        // Initialize your contact object with all necessary fields\r\n        contact: { id: null, name: '', email: '', phone: '', address: '', category: '' },\r\n      };\r\n    },\r\n    mounted() {\r\n      // If an ID is passed, this is an edit operation. Fetch the contact to edit.\r\n      if (this.id) {\r\n        const contacts = fetchContacts();\r\n        // Find the contact by ID and load its data into the form\r\n        this.contact = contacts.find(c => c.id === this.id) || this.contact;\r\n      }\r\n    },\r\n    methods: {\r\n      submitForm() {\r\n        let contacts = fetchContacts();\r\n        if (this.contact.id) {\r\n          // Update operation: find the existing contact by ID and update its details\r\n          contacts = contacts.map(c => c.id === this.contact.id ? this.contact : c);\r\n        } else {\r\n          // Add operation: generate a new ID for the contact and add it to the contacts array\r\n          this.contact.id = Date.now().toString(); // Simple way to generate a unique ID\r\n          contacts.push(this.contact);\r\n        }\r\n        // Persist the updated contacts list to local storage\r\n        saveContacts(contacts);\r\n        // Redirect the user to the contacts list view after saving the contact\r\n        this.$router.push('/');\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  "],"mappings":";AAoBE;AACA,SAASA,aAAa,EAAEC,YAAW,QAAS,iBAAiB;AAE7D,eAAe;EACbC,IAAI,EAAE,aAAa;EACnB;EACAC,KAAK,EAAE,CAAC,IAAI,CAAC;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACL;MACAC,OAAO,EAAE;QAAEC,EAAE,EAAE,IAAI;QAAEJ,IAAI,EAAE,EAAE;QAAEK,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,OAAO,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAG;IACjF,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,IAAI,CAACL,EAAE,EAAE;MACX,MAAMM,QAAO,GAAIZ,aAAa,CAAC,CAAC;MAChC;MACA,IAAI,CAACK,OAAM,GAAIO,QAAQ,CAACC,IAAI,CAACC,CAAA,IAAKA,CAAC,CAACR,EAAC,KAAM,IAAI,CAACA,EAAE,KAAK,IAAI,CAACD,OAAO;IACrE;EACF,CAAC;EACDU,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAIJ,QAAO,GAAIZ,aAAa,CAAC,CAAC;MAC9B,IAAI,IAAI,CAACK,OAAO,CAACC,EAAE,EAAE;QACnB;QACAM,QAAO,GAAIA,QAAQ,CAACK,GAAG,CAACH,CAAA,IAAKA,CAAC,CAACR,EAAC,KAAM,IAAI,CAACD,OAAO,CAACC,EAAC,GAAI,IAAI,CAACD,OAAM,GAAIS,CAAC,CAAC;MAC3E,OAAO;QACL;QACA,IAAI,CAACT,OAAO,CAACC,EAAC,GAAIY,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE;QACzCR,QAAQ,CAACS,IAAI,CAAC,IAAI,CAAChB,OAAO,CAAC;MAC7B;MACA;MACAJ,YAAY,CAACW,QAAQ,CAAC;MACtB;MACA,IAAI,CAACU,OAAO,CAACD,IAAI,CAAC,GAAG,CAAC;IACxB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}