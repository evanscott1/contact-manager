{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchContacts, saveContacts } from '@/utils/storage';\nexport default {\n  props: ['id'],\n  data() {\n    return {\n      // Ensure contact is initialized to prevent access to undefined properties\n      contact: {\n        id: '',\n        name: '',\n        email: '',\n        address: '',\n        phone: '',\n        category: ''\n      }\n    };\n  },\n  mounted() {\n    this.loadContact();\n  },\n  methods: {\n    loadContact() {\n      const contacts = fetchContacts();\n      const foundContact = contacts.find(contact => contact.id.toString() === this.id);\n      console.log(foundContact); // Debug: Log found contact\n      if (foundContact) {\n        this.contact = {\n          ...foundContact\n        };\n      } else {\n        console.error('Contact not found');\n        this.$router.push('/');\n      }\n    },\n    submitUpdate() {\n      // Assuming `contacts` is an array of all contacts and `this.contact` is the updated contact\n      const contacts = fetchContacts();\n      const index = contacts.findIndex(c => c.id === this.contact.id);\n      if (index !== -1) {\n        contacts[index] = this.contact; // Update the contact in the array\n        saveContacts(contacts); // Persist the updated array to storage\n        this.$router.push({\n          name: 'ContactDetails',\n          params: {\n            id: this.contact.id\n          }\n        }); // Navigate to the updated contact's details view\n      } else {\n        console.error('Contact not found');\n        // Handle the error case\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchContacts","saveContacts","props","data","contact","id","name","email","address","phone","category","mounted","loadContact","methods","contacts","foundContact","find","toString","console","log","error","$router","push","submitUpdate","index","findIndex","c","params"],"sources":["C:\\Users\\regev\\contact-manager\\src\\components\\ContactUpdateForm.vue"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"submitUpdate\">\r\n      <!-- Form fields populated with the contact's current details -->\r\n      <div>\r\n      <label for=\"name\">Name:</label>\r\n      <input id=\"name\" v-model=\"contact.name\" type=\"text\">\r\n    </div>\r\n    <div>\r\n      <label for=\"email\">Email:</label>\r\n      <input id=\"email\" v-model=\"contact.email\" type=\"email\">\r\n    </div>\r\n    <div>\r\n      <label for=\"address\">Address:</label>\r\n      <input id=\"address\" v-model=\"contact.address\" type=\"text\">\r\n    </div>\r\n    <div>\r\n      <label for=\"phone\">Phone:</label>\r\n      <input id=\"phone\" v-model=\"contact.phone\" type=\"text\">\r\n    </div>\r\n    <div>\r\n      <label for=\"category\">Category:</label>\r\n      <select id=\"category\" v-model=\"contact.category\">\r\n        <option value=\"\">Select a Category</option>\r\n        <option value=\"family\">Family</option>\r\n        <option value=\"friend\">Friend</option>\r\n        <option value=\"colleague\">Colleague</option>\r\n        <!-- Add more categories as needed -->\r\n      </select>\r\n    </div>\r\n      <button type=\"submit\">Save Changes</button>\r\n    </form>\r\n  </template>\r\n  \r\n  <script>\r\n  import { fetchContacts, saveContacts } from '@/utils/storage';\r\n  \r\n  export default {\r\n    props: ['id'],\r\n    data() {\r\n      return {\r\n    // Ensure contact is initialized to prevent access to undefined properties\r\n    contact: {\r\n      id: '',\r\n      name: '',\r\n      email: '',\r\n      address: '',\r\n      phone: '',\r\n      category: ''\r\n    }\r\n  };\r\n    },\r\n    mounted() {\r\n      this.loadContact();\r\n    },\r\n    methods: {\r\n      loadContact() {\r\n  const contacts = fetchContacts();\r\n  const foundContact = contacts.find(contact => contact.id.toString() === this.id);\r\n  console.log(foundContact); // Debug: Log found contact\r\n  if (foundContact) {\r\n    this.contact = { ...foundContact };\r\n  } else {\r\n    console.error('Contact not found');\r\n    this.$router.push('/');\r\n  }\r\n},\r\n\r\n      submitUpdate() {\r\n    // Assuming `contacts` is an array of all contacts and `this.contact` is the updated contact\r\n    const contacts = fetchContacts();\r\n    const index = contacts.findIndex(c => c.id === this.contact.id);\r\n    if (index !== -1) {\r\n      contacts[index] = this.contact; // Update the contact in the array\r\n      saveContacts(contacts); // Persist the updated array to storage\r\n      this.$router.push({ name: 'ContactDetails', params: { id: this.contact.id }}); // Navigate to the updated contact's details view\r\n    } else {\r\n      console.error('Contact not found');\r\n      // Handle the error case\r\n    }\r\n  },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";AAkCE,SAASA,aAAa,EAAEC,YAAW,QAAS,iBAAiB;AAE7D,eAAe;EACbC,KAAK,EAAE,CAAC,IAAI,CAAC;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACT;MACAC,OAAO,EAAE;QACPC,EAAE,EAAE,EAAE;QACNC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,EAAE;QACXC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ;IACF,CAAC;EACC,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC;EACpB,CAAC;EACDC,OAAO,EAAE;IACPD,WAAWA,CAAA,EAAG;MAClB,MAAME,QAAO,GAAId,aAAa,CAAC,CAAC;MAChC,MAAMe,YAAW,GAAID,QAAQ,CAACE,IAAI,CAACZ,OAAM,IAAKA,OAAO,CAACC,EAAE,CAACY,QAAQ,CAAC,MAAM,IAAI,CAACZ,EAAE,CAAC;MAChFa,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC,EAAE;MAC3B,IAAIA,YAAY,EAAE;QAChB,IAAI,CAACX,OAAM,GAAI;UAAE,GAAGW;QAAa,CAAC;MACpC,OAAO;QACLG,OAAO,CAACE,KAAK,CAAC,mBAAmB,CAAC;QAClC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACxB;IACF,CAAC;IAEKC,YAAYA,CAAA,EAAG;MACjB;MACA,MAAMT,QAAO,GAAId,aAAa,CAAC,CAAC;MAChC,MAAMwB,KAAI,GAAIV,QAAQ,CAACW,SAAS,CAACC,CAAA,IAAKA,CAAC,CAACrB,EAAC,KAAM,IAAI,CAACD,OAAO,CAACC,EAAE,CAAC;MAC/D,IAAImB,KAAI,KAAM,CAAC,CAAC,EAAE;QAChBV,QAAQ,CAACU,KAAK,IAAI,IAAI,CAACpB,OAAO,EAAE;QAChCH,YAAY,CAACa,QAAQ,CAAC,EAAE;QACxB,IAAI,CAACO,OAAO,CAACC,IAAI,CAAC;UAAEhB,IAAI,EAAE,gBAAgB;UAAEqB,MAAM,EAAE;YAAEtB,EAAE,EAAE,IAAI,CAACD,OAAO,CAACC;UAAG;QAAC,CAAC,CAAC,EAAE;MACjF,OAAO;QACLa,OAAO,CAACE,KAAK,CAAC,mBAAmB,CAAC;QAClC;MACF;IACF;EACE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}