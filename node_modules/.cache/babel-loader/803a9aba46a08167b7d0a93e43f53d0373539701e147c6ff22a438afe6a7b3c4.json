{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Contact Details\", -1);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Options\", -1);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1);\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Contact not found or loading...\", -1);\nconst _hoisted_8 = [_hoisted_7];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, $data.contact ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", null, \"Name: \" + _toDisplayString($data.contact.name), 1), _createElementVNode(\"p\", null, \"Email: \" + _toDisplayString($data.contact.email), 1), _createElementVNode(\"p\", null, \"Address: \" + _toDisplayString($data.contact.address), 1), _createElementVNode(\"p\", null, \"Phone: \" + _toDisplayString($data.contact.phone), 1), _createElementVNode(\"p\", null, \"Category: \" + _toDisplayString($data.contact.category), 1), _hoisted_3, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goToUpdateForm && $options.goToUpdateForm(...args))\n  }, \"Update Contact\"), _hoisted_4, _hoisted_5, _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.deleteContact && $options.deleteContact(...args))\n  }, \"Delete Contact\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _hoisted_8))]);\n}","map":{"version":3,"names":["_createElementVNode","key","_hoisted_7","_createElementBlock","_hoisted_1","$data","contact","_hoisted_2","_toDisplayString","name","email","address","phone","category","_hoisted_3","onClick","_cache","args","$options","goToUpdateForm","_hoisted_4","_hoisted_5","deleteContact","_hoisted_6","_hoisted_8"],"sources":["C:\\Users\\regev\\contact-manager\\src\\components\\ContactDetails.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>Contact Details</h1>\r\n    <!-- Only display contact details if contact is not null -->\r\n    <div v-if=\"contact\">\r\n      <p>Name: {{ contact.name }}</p>\r\n      <p>Email: {{ contact.email }}</p>\r\n      <p>Address: {{ contact.address }}</p>\r\n      <p>Phone: {{ contact.phone }}</p>\r\n      <p>Category: {{ contact.category }}</p>\r\n      <!-- Display other details like address, phone, category -->\r\n      <h1>Options</h1>\r\n      <button @click=\"goToUpdateForm\">Update Contact</button>\r\n      <br><br>\r\n      <button @click=\"deleteContact\">Delete Contact</button>\r\n    </div>\r\n    <div v-else>\r\n      <p>Contact not found or loading...</p>\r\n    </div>\r\n  </div>\r\n  </template>\r\n\r\n  \r\n  <script>\r\n  import { fetchContacts, saveContacts } from '@/utils/storage'; // Adjust the path as necessary\r\n  \r\n  export default {\r\n    name: 'ContactDetails',\r\n    data() {\r\n      return {\r\n        contact: null // Initialize contact as null\r\n      };\r\n    },\r\n    mounted() {\r\n      this.loadContact();\r\n    },\r\n    methods: {\r\n      loadContact() {\r\n        // Fetch the contact ID from the route parameters\r\n        const contactId = this.$route.params.id;\r\n        // Fetch all contacts from local storage\r\n        const contacts = fetchContacts();\r\n        // Find the specific contact by ID\r\n        this.contact = contacts.find(contact => contact.id.toString() === contactId);\r\n        // Handle case where contact is not found\r\n        if (!this.contact) {\r\n          alert('Contact not found!');\r\n          // Optionally, redirect back to the contact list\r\n          this.$router.push('/');\r\n        }\r\n      },\r\n      deleteContact() {\r\n      if (confirm(\"Are you sure you want to delete this contact?\")) {\r\n        let contacts = fetchContacts();\r\n        contacts = contacts.filter(contact => contact.id !== this.contact.id);\r\n        saveContacts(contacts);\r\n        this.$router.push('/'); // Navigate back to the list or a confirmation page\r\n      }\r\n      },\r\n      goToUpdateForm() {\r\n      this.$router.push({ name: 'ContactUpdate', params: { id: this.contact.id } });\r\n    }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  "],"mappings":";gCAEIA,mBAAA,CAAwB,YAApB,iBAAe;;EAFvBC,GAAA;AAAA;gCAWMD,mBAAA,CAAgB,YAAZ,SAAO;gCAEXA,mBAAA,CAAI;gCAAAA,mBAAA,CAAI;;EAbdC,GAAA;AAAA;gCAiBMD,mBAAA,CAAsC,WAAnC,iCAA+B;oBAAlCE,UAAsC,C;;uBAhB1CC,mBAAA,CAkBM,cAjBJC,UAAwB,EAEbC,KAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAWM,OAfVI,UAAA,GAKMP,mBAAA,CAA+B,WAA5B,QAAM,GAAAQ,gBAAA,CAAGH,KAAA,CAAAC,OAAO,CAACG,IAAI,OACxBT,mBAAA,CAAiC,WAA9B,SAAO,GAAAQ,gBAAA,CAAGH,KAAA,CAAAC,OAAO,CAACI,KAAK,OAC1BV,mBAAA,CAAqC,WAAlC,WAAS,GAAAQ,gBAAA,CAAGH,KAAA,CAAAC,OAAO,CAACK,OAAO,OAC9BX,mBAAA,CAAiC,WAA9B,SAAO,GAAAQ,gBAAA,CAAGH,KAAA,CAAAC,OAAO,CAACM,KAAK,OAC1BZ,mBAAA,CAAuC,WAApC,YAAU,GAAAQ,gBAAA,CAAGH,KAAA,CAAAC,OAAO,CAACO,QAAQ,OAEhCC,UAAgB,EAChBd,mBAAA,CAAuD;IAA9Ce,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;KAAE,gBAAc,GAC9CG,UAAI,EAAAC,UAAI,EACRrB,mBAAA,CAAsD;IAA7Ce,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAI,aAAA,IAAAJ,QAAA,CAAAI,aAAA,IAAAL,IAAA,CAAa;KAAE,gBAAc,E,oBAE/Cd,mBAAA,CAEM,OAlBVoB,UAAA,EAAAC,UAAA,G"},"metadata":{},"sourceType":"module","externalDependencies":[]}