{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"name\"\n}, \"Name:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"email\"\n}, \"Email:\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"address\"\n}, \"Email:\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Save Contact\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"input\", {\n    id: \"name\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.contact.name = $event),\n    type: \"text\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.contact.name]])]), _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    id: \"email\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.contact.email = $event),\n    type: \"email\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.contact.email]])]), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    id: \"address\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.contact.address = $event),\n    type: \"address\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.contact.address]])]), _createCommentVNode(\" Add more fields for address, phone number, and category \"), _hoisted_4], 32 /* NEED_HYDRATION */);\n}","map":{"version":3,"names":["_createElementVNode","for","type","_createElementBlock","onSubmit","_cache","_withModifiers","args","$options","submitForm","_hoisted_1","id","$event","$data","contact","name","required","_hoisted_2","email","_hoisted_3","address","_createCommentVNode","_hoisted_4"],"sources":["C:\\Users\\regev\\contact-manager\\src\\components\\ContactForm.vue"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"submitForm\">\r\n      <div>\r\n        <label for=\"name\">Name:</label>\r\n        <input id=\"name\" v-model=\"contact.name\" type=\"text\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"email\">Email:</label>\r\n        <input id=\"email\" v-model=\"contact.email\" type=\"email\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"address\">Email:</label>\r\n        <input id=\"address\" v-model=\"contact.address\" type=\"address\" required>\r\n      </div>\r\n      <!-- Add more fields for address, phone number, and category -->\r\n      <button type=\"submit\">Save Contact</button>\r\n    </form>\r\n  </template>\r\n  \r\n  <script>\r\n  // Import the local storage utility functions\r\n  import { fetchContacts, saveContacts } from '@/utils/storage';\r\n  \r\n  export default {\r\n    name: 'ContactForm',\r\n    // If you're using Vue Router's props feature for passing the ID, declare the prop\r\n    props: ['id'],\r\n    data() {\r\n      return {\r\n        // Initialize your contact object with all necessary fields\r\n        contact: { id: null, name: '', email: '', phone: '', address: '', category: '' },\r\n      };\r\n    },\r\n    mounted() {\r\n      // If an ID is passed, this is an edit operation. Fetch the contact to edit.\r\n      if (this.id) {\r\n        const contacts = fetchContacts();\r\n        // Find the contact by ID and load its data into the form\r\n        this.contact = contacts.find(c => c.id === this.id) || this.contact;\r\n      }\r\n    },\r\n    methods: {\r\n      submitForm() {\r\n        let contacts = fetchContacts();\r\n        if (this.contact.id) {\r\n          // Update operation: find the existing contact by ID and update its details\r\n          contacts = contacts.map(c => c.id === this.contact.id ? this.contact : c);\r\n        } else {\r\n          // Add operation: generate a new ID for the contact and add it to the contacts array\r\n          this.contact.id = Date.now().toString(); // Simple way to generate a unique ID\r\n          contacts.push(this.contact);\r\n        }\r\n        // Persist the updated contacts list to local storage\r\n        saveContacts(contacts);\r\n        // Redirect the user to the contacts list view after saving the contact\r\n        this.$router.push('/');\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  "],"mappings":";gCAGQA,mBAAA,CAA+B;EAAxBC,GAAG,EAAC;AAAM,GAAC,OAAK;gCAIvBD,mBAAA,CAAiC;EAA1BC,GAAG,EAAC;AAAO,GAAC,QAAM;gCAIzBD,mBAAA,CAAmC;EAA5BC,GAAG,EAAC;AAAS,GAAC,QAAM;gCAI7BD,mBAAA,CAA2C;EAAnCE,IAAI,EAAC;AAAQ,GAAC,cAAY;;uBAdpCC,mBAAA,CAeO;IAfAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MADjBC,cAAA,KAAAC,IAAA,KAC2BC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;MAC/BP,mBAAA,CAGM,cAFJU,UAA+B,E,gBAC/BV,mBAAA,CAA6D;IAAtDW,EAAE,EAAC,MAAM;IAJxB,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAIkCC,KAAA,CAAAC,OAAO,CAACC,IAAI,GAAAH,MAAA;IAAEV,IAAI,EAAC,MAAM;IAACc,QAAQ,EAAR;iDAA1BH,KAAA,CAAAC,OAAO,CAACC,IAAI,E,KAExCf,mBAAA,CAGM,cAFJiB,UAAiC,E,gBACjCjB,mBAAA,CAAgE;IAAzDW,EAAE,EAAC,OAAO;IARzB,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAQmCC,KAAA,CAAAC,OAAO,CAACI,KAAK,GAAAN,MAAA;IAAEV,IAAI,EAAC,OAAO;IAACc,QAAQ,EAAR;iDAA5BH,KAAA,CAAAC,OAAO,CAACI,KAAK,E,KAE1ClB,mBAAA,CAGM,cAFJmB,UAAmC,E,gBACnCnB,mBAAA,CAAsE;IAA/DW,EAAE,EAAC,SAAS;IAZ3B,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAYqCC,KAAA,CAAAC,OAAO,CAACM,OAAO,GAAAR,MAAA;IAAEV,IAAI,EAAC,SAAS;IAACc,QAAQ,EAAR;iDAAhCH,KAAA,CAAAC,OAAO,CAACM,OAAO,E,KAE9CC,mBAAA,6DAAgE,EAChEC,UAA2C,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}