{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Contact List\", -1);\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.contacts, contact => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: contact.id\n    }, [_createTextVNode(_toDisplayString(contact.name) + \" - \", 1), _createElementVNode(\"button\", {\n      onClick: $event => $options.viewDetails(contact.id)\n    }, \"View Details\", 8, _hoisted_2)]);\n  }), 128))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","contacts","contact","key","id","_createTextVNode","_toDisplayString","name","onClick","$event","$options","viewDetails","_hoisted_2"],"sources":["C:\\Users\\regev\\contact-manager\\src\\components\\ContactList.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>Contact List</h1>\r\n      <!-- List contacts here -->\r\n      <ul>\r\n        <li v-for=\"contact in contacts\" :key=\"contact.id\">\r\n          {{ contact.name }} - <button @click=\"viewDetails(contact.id)\">View Details</button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  // Import the necessary functions from your storage utility\r\n  import { fetchContacts, saveContacts } from '@/utils/storage';\r\n  \r\n  export default {\r\n    name: 'ContactList',\r\n    data() {\r\n      return {\r\n        // Initialize the contacts array to be filled with the fetched contacts\r\n        contacts: []\r\n      };\r\n    },\r\n    created() {\r\n      // Load contacts from local storage when the component is created\r\n      this.contacts = fetchContacts();\r\n    },\r\n    methods: {\r\n      viewDetails(contactId) {\r\n        // Navigate to the ContactDetails view, passing the contact ID as a parameter\r\n        this.$router.push({ name: 'ContactDetails', params: { id: contactId } });\r\n      },\r\n      deleteContact(contactId) {\r\n        // Confirm before deleting\r\n        if (confirm(\"Are you sure you want to delete this contact?\")) {\r\n          // Filter out the contact to delete\r\n          const updatedContacts = this.contacts.filter(contact => contact.id !== contactId);\r\n          // Save the updated contacts list back to local storage\r\n          saveContacts(updatedContacts);\r\n          // Update the local contacts array to reflect the change\r\n          this.contacts = updatedContacts;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  "],"mappings":";gCAEMA,mBAAA,CAAqB,YAAjB,cAAY;mBAFtB;;uBACIC,mBAAA,CAQM,cAPJC,UAAqB,EAErBF,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKE,SAAA,QAPbC,WAAA,CAK8BC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAlBN,mBAAA,CAEK;MAF4BO,GAAG,EAAED,OAAO,CAACE;QALtDC,gBAAA,CAAAC,gBAAA,CAMaJ,OAAO,CAACK,IAAI,IAAG,KAAG,MAAAZ,mBAAA,CAA8D;MAArDa,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,WAAW,CAACT,OAAO,CAACE,EAAE;OAAG,cAAY,KANpFQ,UAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}